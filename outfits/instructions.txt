# FastAPI Outfit Manager - Complete Implementation

## Project Structure

```
outfit_manager/
├── main.py                     # FastAPI application entry point
├── requirements.txt            # Python dependencies
├── models/
│   ├── __init__.py            # SQLModel database models
│   └── database.py            # Database configuration
├── routers/
│   ├── __init__.py            # Router package init
│   ├── outfits.py            # Outfit CRUD + image upload endpoints
│   ├── components.py         # Component CRUD + image upload endpoints
│   ├── vendors.py            # Vendor CRUD endpoints
│   └── images.py             # Image serving endpoints
├── services/
│   ├── image_service.py      # Image processing and validation
│   └── seed_data.py          # Database seeding
├── templates/                # Jinja2 templates (for future HTMX views)
└── static/                   # Static files (CSS, JS, images)
```

## Setup Instructions

1. **Create project directory and virtual environment:**
```bash
mkdir outfit_manager
cd outfit_manager
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

2. **Install dependencies:**
```bash
pip install -r requirements.txt
```

3. **Create the directory structure:**
```bash
mkdir -p models routers services templates static/css static/js static/images
touch models/__init__.py routers/__init__.py services/__init__.py
```

4. **Run the application:**
```bash
python main.py
```

## API Endpoints

### Outfits
- `GET /api/outfits/` - List outfits with calculated costs
- `GET /api/outfits/{outfit_id}` - Get single outfit
- `POST /api/outfits/` - Create new outfit
- `PUT /api/outfits/{outfit_id}` - Update outfit
- `DELETE /api/outfits/{outfit_id}` - Soft delete outfit
- `POST /api/outfits/{outfit_id}/upload-image` - Upload outfit image
- `DELETE /api/outfits/{outfit_id}/image` - Remove outfit image
- `GET /api/outfits/{outfit_id}/components` - Get outfit components
- `POST /api/outfits/{outfit_id}/components/{component_id}` - Add component to outfit
- `DELETE /api/outfits/{outfit_id}/components/{component_id}` - Remove component from outfit

### Components
- `GET /api/components/` - List components with vendor/piece names
- `GET /api/components/{component_id}` - Get single component
- `POST /api/components/` - Create new component
- `PUT /api/components/{component_id}` - Update component
- `DELETE /api/components/{component_id}` - Soft delete component
- `POST /api/components/{component_id}/upload-image` - Upload component image
- `DELETE /api/components/{component_id}/image` - Remove component image
- `GET /api/components/{component_id}/outfits` - Get component's outfits

### Vendors
- `GET /api/vendors/` - List vendors
- `GET /api/vendors/{vendor_id}` - Get single vendor
- `POST /api/vendors/` - Create new vendor
- `PUT /api/vendors/{vendor_id}` - Update vendor
- `DELETE /api/vendors/{vendor_id}` - Soft delete vendor
- `GET /api/vendors/{vendor_id}/components` - Get vendor's components

### Images
- `GET /api/images/component/{component_id}?thumbnail=false` - Serve component image
- `GET /api/images/outfit/{outfit_id}?thumbnail=false` - Serve outfit image
- `HEAD /api/images/component/{component_id}` - Check if component has image
- `HEAD /api/images/outfit/{outfit_id}` - Check if outfit has image

## Key Features

### Image Upload & Processing
- **Supported formats:** JPEG, PNG, WebP
- **File size limit:** 5MB
- **Auto-compression:** Images optimized for storage
- **Thumbnail generation:** Available via `?thumbnail=true`
- **BLOB storage:** Images stored directly in database

### Database Relationships
- **Components ↔ Outfits:** Many-to-many via `out2comp` table
- **Components → Vendors:** Many-to-one relationship
- **Components → Pieces:** Many-to-one relationship
- **Soft deletes:** Items marked as inactive rather than deleted

### Calculated Fields
- **Outfit Score:** Automatically calculated sum of component costs
- **Component Count:** Number of active components in outfit
- **Image Status:** `has_image` boolean in responses

### Auto-Generated Data
- **Vendors:** ebay, Poshmark, ThredUP, Amazon
- **Piece Types:** Headwear, Outerwear, Dress, Pants, Shorts, Sweater, Shirt, Shoes, Accessories

## Usage Examples

### Upload Component Image
```bash
curl -X POST "http://localhost:8000/api/components/1/upload-image" \
  -H "accept: application/json" \
  -H "Content-Type: multipart/form-data" \
  -F "file=@image.jpg"
```

### Get Outfit with Calculated Cost
```bash
curl "http://localhost:8000/api/outfits/1"
```

### Add Component to Outfit
```bash
curl -X POST "http://localhost:8000/api/outfits/1/components/1"
```

## Next Steps

To complete the full application:
1. **Create HTMX templates** for the web interface
2. **Add CSS styling** matching your purple UI design
3. **Implement JavaScript** for drag & drop image uploads
4. **Add validation** and error handling on the frontend
5. **Create responsive layouts** for mobile devices

The API is fully functional and ready to support the HTMX frontend you described in your plan!